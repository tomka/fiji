This document describes the design of Fiji mAKE (also known as "fake")

The purpose of the Fake system is to build Fiji, being a bit intelligent
about what has to be built and what is up-to-date.

The principal way to find what has to be made is to check for the times of
last modification of the 'prerequisites' to a 'target', and make the
target using those prerequisites only when the target is older than at
least one of the prerequisites.


Fakefile syntax
===============

A Fakefile contains three different types of things:

- comments,
- variables, and
- rules

Rules take the form

	target <- prerequisite1 prerequisite2 ...

which means that the prerequisites have to be built first (when there is
a rule for them), and then makes the target.  It is inferred from the
rule how the target can be made; see below for details.

Variables can be target, prerequisite, and platform-dependent.  For example,
if you want to set the variable "verbose" only for the platform "win64", you
can do so with

	verbose(win64)=true

Variables are case-insensitive.

Variables are overridden by later definitions.  Therefore, if you want to
_add_ something to a certain variable, depending on the target, you have
to use the following construct:

	# global classpath
	classPath=abc.jar
	# specific classpath
	classPath(xyz.jar)=$classPath:hello.jar

See below for details which variables have a special meaning.


The design of Fake.java
=======================

The whole system is in the class fiji.build.Fake, with inner classes.  That was
done on purpose, so that you can copy one file around, should you need
the same system somewhere else.

The most important inner class is "Parser".  This class' role is to parse
the Fakefile, store the results and start the build process.  It also
stores the variables.


Rules
=====

The most important building block of the Fake system is the 'Rule'.  This
is implemented by the abstract class 'Rule', which is an inner class of
'Parser'.

Apart from some convenience functions (for example, to get at possibly
target-dependent variables), the 'Rule' has these important methods:

- upToDate(): this method can be overridden if the default of checking
  the modification times of the prerequisites versus the target is not
  enough/not desired.

- make(): this method starts the actual making process.  It should not
  be necessary to override this method, since it is basically a small
  wrapper around upToDate() and action().

- action(): this method is called when a target is not up-to-date and has
  to be made.

The cwd problem:
----------------

Java does not support changing the current working directory.  So we have
the member variable 'cwd' of the class 'Rule' which contains the current
working directory (relative to the global working directory).

This is necessary because we want to be able to work with Fakefiles in
subdirectories (submodules).

To get the (globally correct) path of a file, use "makePath(cwd, path)".

Getting variables' values
-------------------------

Variables can be set depending on a platform, target or prerequisite,
with priority prerequisite > target > platform > global.

To account for this, there is a method 'getVar()' in 'Rule', which
calls the method 'getVariable()' of the class 'Parser' with the
appropriate keys.


The different types of rules are:

All
---

This is the first rule in a Fakefile.  Its prerequisites are made, its
target is ignored.

	all <- jars/ij.jar fiji

CompileClass
------------

This rule compiles a .class from a .java file:

	build/abc.class <- src/abc.java

CompileCProgram
---------------

This rule calls GCC (or G++) to make a program.  If GCC could not be
executed, and the variable 'precompiledPath' is set, Fake attempts to
copy the executable from there instead (possibly with suffix "-<platform>"):

	fiji <- fiji.cxx

CompileJar
----------

This rule builds a .jar from the prerequisites, compiling any .java files
on the go.  It discovers the correct package names, and puts the files
into the correct paths.

In other words, if you specify 'src/xyz/abc.java' as a prerequisite, but
the class is really in the package 'xyz', the .class file will turn up
in the .jar file as 'xyz/abc.class'.

If a file other than a .java is specified, but shares the same prefix, the
same handling will apply.  In other words, if 'src/xyz/abc.java' was
specified before 'src/xyz/README', that file will end up in the .jar as
'xyz/README'.

If the variable 'pluginsConfigDirectory' is set, and a .config file with
the same basename as the .jar file is found there, it is inserted as
'plugins.config', possibly overriding a 'plugins.config' in the
prerequisites.

	xyz.jar <- src/xyz/**/*.java

CopyJar
-------

This rule just copies a .jar file, checking contents instead of the
modification time: a .jar is nothing else than a .zip, which contains
timestamps for all contained files.  This means that the .jar files can
differ, even if the contained .class files do not, just because they
were compiled at different times.

CopyJar also respects the 'pluginsConfigDirectory' variable, just as the
CompileJar class.

	dist/xyz.jar <- abc/xyz.jar

ExecuteProgram
--------------

This rule will revert to external programs to do the job.

As a special convenience, Python scripts are executed by discovering
Fiji's Jython and running the scripts in that context.

Variables are expanded in the specified program string.  As a special
convenience, the variables "TARGET" and "PRE" expand to the target
and the prerequisites, unless overridden by the Fakefile.

It is no error to have an empty program; in that case, the rule behaves
just like the 'All' rule.

	run[open $TARGET $PRE] <- abc.txt

SubFake
-------

The 'SubFake' rule will try to run Fake in a subdirectory, or if no
Fakefile was found, to run "make".

If the variable 'ignoreMissingFakefiles' is not set, or false, it is
an error if the subdirectory contains neither Fakefile nor Makefile.

If the subdirectory does not contain the target file, and the variable
'precompiledDirectory' is set, the target is copied from there.

	plugins/TrakEM2_.jar <- TrakEM2/

Special
-------

There are a few special rules, such as 'clean', 'show-rules' or
'show-variables'.  These do not really check prerequisites, and are
therefore 'special'.

Every special rule can be overridden in a Fakefile.


Variables
=========

There are a few variables with specific meanings:

verbose: be verbose

debug: be more verbose than is good for the eye

classPath: set the classpath for compiling .java files

javaVersion: set the java version for compiling .java files

showDeprecation: show deprecated usage when compiling .java files

toolsPath: try to discover tools.jar here

pluginsConfigDirectory: find plugins.config files for .jar files here

ignoreMissingFakefiles: do not complain when a Fakefile/Makefile is missing

precompiledDirectory: fall back to copying from here

mainClass: use this main class in a .jar


Some utility classes
====================

For some nice features of "fake", we had to add a few abilities which were
wrapped in inner classes:

ByteCodeAnalyzer: to know which classes are actually needed by a compiled
	.java class, we inspect the .class files directly.  The file format
	is well enough documented, and stable enough.

	We use it to discover which .class files to copy to a new location
	or into a .jar file, which would be tricky otherwise, given that
	you can not only hide inner classes in .java files, but also
	other classes, provided they are not public (i.e. package-local).

GlobFilter: funnily enough, Java contains regular expressions, but not
	shell patterns such as "*.class".  This class converts shell patterns
	into regular expressions, and can be passed as a FilenameFilter to
	java.io.File's list() method.

	It is used both for file name globbing in the prerequisite part of
	the rules, as well as globbing targets from the existing prerequisites
	in rules such as "*.class <- *.java".

JarClassLoader: this is a class loader that is capable of loading classes
	from .jar files at run-time, i.e. they do not have to be in the
	class path.  This class was closely modelled after ImageJ's plugin
	class loader.

	It is used to load javac and jython.
